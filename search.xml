<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>http服务异常返回io</title>
      <link href="/2018/08/07/http%E6%9C%8D%E5%8A%A1%E5%BC%82%E5%B8%B8%E8%BF%94%E5%9B%9Eio/"/>
      <url>/2018/08/07/http%E6%9C%8D%E5%8A%A1%E5%BC%82%E5%B8%B8%E8%BF%94%E5%9B%9Eio/</url>
      <content type="html"><![CDATA[<p>记一下线上调用spring-boot微服务出现 curl: (18) transfer closed with outstanding read data remaining</p><h2 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h2><ul><li>http 1.1</li><li>spring-boot-starter-web 2.0.2.RELEASE</li><li>spring-boot-starter-jetty 2.0.2.RELEASE（jetty 9.4.10）</li></ul><h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><ul><li>只有这一个进程的这一个接口出现这个问题</li><li>使用http1.1版本访问 时会出现上述问题</li></ul><h2 id="问题排查过程"><a href="#问题排查过程" class="headerlink" title="问题排查过程"></a>问题排查过程</h2><ul><li>第一步当然是google一下 transfer closed with outstanding read data remaining 这个异常由于什么原因导致的<br>可以参考 <a href="https://blog.csdn.net/delphiwcdj/article/details/51095945" target="_blank" rel="noopener">https://blog.csdn.net/delphiwcdj/article/details/51095945</a> 这篇文章<br>由上可以知道在http1.1版本默认使用 Connection: keep-alive</li><li>结合前面我们知道在http1.1默认是长连接，一次请求以 0\r\n\r\n 为结束标志</li><li>我们可以使用tcpdump抓包看一下这次http请求的过程，发现请求是由服务端主动关闭了连接，并且每次返回的数据和正常返回的数据比缺少 0\r\n\r\n</li><li>通过上面我们现在有一个临时解决的方案：<ul><li>将http版本改为1.0，不适用长连接的方式</li><li>或者在请求头中加上 “Connection:close” 的方式来修改默认的长连接方式</li></ul></li><li>然后我们接着往下查：<ul><li>只有一个进程出现问题说明这个具有偶发性</li><li>只有一个接口出现问题说明应该和uri有关</li><li>我们把请求参数去掉发现还是有问题，这时候根本没有进入业务处理，和其他的url都一样直接返回了，这时候只能在本地debug跟踪一下处理流程了，看看哪块和uri有关</li></ul></li><li><p>我们再本地debug一下，可以发现还没进入业务处理的逻辑，在业务处理之外发现了有两个过滤器，并且这两个过滤器和uri相关<br>其中一个过滤器的代码如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    String uri = request.getRequestURI();</span><br><span class="line">    timeInMillis.putIfAbsent(uri, <span class="keyword">new</span> CircularFifoQueue&lt;<span class="keyword">Long</span>&gt;(MAX_LENGTH_RESPONSE_TIME_QUEUE));</span><br><span class="line">    Queue&lt;<span class="keyword">Long</span>&gt; <span class="keyword">times</span> = timeInMillis.get(uri);</span><br><span class="line">    <span class="keyword">Long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">    filterChain.doFilter(request, response);</span><br><span class="line">    <span class="keyword">Long</span> endTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">times</span>.add(endTime - beginTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中我们发现有一个循环队列 CircularFifoQueue，点进去发现不是线程安全的</p></li><li><p>同时还有一个点，当时线上这个进程的内存占用比其他进程明显要高，并且访问统计的url（/status/dashboard）会直接抛出一个内存溢出的异常</p></li><li>这时候我们需要查看线上内存的具体情况，为了避免影响线上业务，我们需要先将当前进程的流量切掉（最好找运维操作）</li><li>迁移完流量后，我们可以用jmap -histo {pid} 查看当时java堆中具体是哪些对象占用内存较多</li><li><p>这时候发现有一个占用较多的 ConcurrentHashMap.Node，可能和我们的问题相关了</p></li><li><p>我们在本地模拟一下内存溢出看看是否会导致刚刚那个问题，修改一下过滤器的代码：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">      String uri = request.getRequestURI();</span><br><span class="line">      timeInMillis.putIfAbsent(uri, <span class="keyword">new</span> CircularFifoQueue&lt;<span class="keyword">Long</span>&gt;(MAX_LENGTH_RESPONSE_TIME_QUEUE));</span><br><span class="line">      Queue&lt;<span class="keyword">Long</span>&gt; <span class="keyword">times</span> = timeInMillis.get(uri);</span><br><span class="line">      <span class="keyword">Long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">      filterChain.doFilter(request, response);</span><br><span class="line">      <span class="keyword">Long</span> endTime = System.currentTimeMillis();</span><br><span class="line">      <span class="keyword">times</span>.add(endTime - beginTime);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>直接在最后抛出一个内存溢出的错误，这时候我们可以看到客户端的表现就会出现 curl: (18) transfer closed with outstanding read data remaining 了。</p></li><li>到这里就基本可以确定是由于非现场安全的队列在某些并发场景下导致了内存溢出导致的。</li></ul><h3 id="最终解决方案"><a href="#最终解决方案" class="headerlink" title="最终解决方案"></a>最终解决方案</h3><ul><li>将循环队列替换为我们自己实现的数组，然后用AtomicLong实现一个数组的游标去设置值</li></ul><h3 id="扩展，深入springmvc的调用链查看一下具体情况"><a href="#扩展，深入springmvc的调用链查看一下具体情况" class="headerlink" title="扩展，深入springmvc的调用链查看一下具体情况"></a>扩展，深入springmvc的调用链查看一下具体情况</h3><ul><li>我们本地debug的时候跟一下jetty的调用链</li><li><p>在jtty中分发请求的HttpChannel这个类，我们一直可以跟踪到这个方法</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">private</span> void minimalErrorResponse(Throwable failure)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">          Integer code=(Integer)<span class="variable">_request</span>.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);</span><br><span class="line">          <span class="variable">_response</span>.reset(<span class="literal">true</span>);</span><br><span class="line">          <span class="variable">_response</span>.setStatus(code == null ? <span class="number">500</span> : code);</span><br><span class="line">          <span class="variable">_response</span>.flushBuffer();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Throwable x)</span><br><span class="line">      &#123;</span><br><span class="line">          failure.addSuppressed(x);</span><br><span class="line">          abort(failure);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们可以看到在请求出现异常时jetty会将response重置，并修改状态码，那为什么我们还能收到正常的返回值，并且状态码是200呢？</p></li><li>跟踪到response的reset方法里面，我们会发现最终会调用到 HttpChannel的resetBuffer 方法中判断了当前channel的状态是否为commonited状态，如果commonited为true的话，直接抛出了异常，然后在后面讲jetty对应的channel关闭了。</li><li>接下来我们看看channel的commonited状态什么时候置位true的，我们重新debug跟踪可以发现在springmvc 处理response返回值时的 AbstractMessageConverterMethodProcessor.writeWithMessageConverters 这个方法中调用了channel的write方法，这个时候将commonited设置为true的</li><li>综上我们可以发现springmvc和jetty结合的处理流程存在一定的问题，springmvc处理业务返回值时已经将数据写入了jetty的channel，并且将commonited设置为true了，后续拦截器的处理只要出现异常都会导致这种数据正常返回，连接异常关闭的情况。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>上线新的技术框架还是必须要到线上测试充分才推广，不然会有想不到的坑</li><li>业务中要充分考虑并发场景</li></ul>]]></content>
      
      
        <tags>
            
            <tag> curl:(18) transfer closed with outstanding read data remaining </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/02/hello-world/"/>
      <url>/2018/08/02/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
